---
format: html
editor: visual
  markdown: 
    wrap: 72
---

Vasmos a cargar el dataset de AirBnB descargado de [aquí](https://public.opendatasoft.com/explore/dataset/airbnb-listings/export/?disjunctive.host_verifications&disjunctive.amenities&disjunctive.features&q=Madrid&dataChart=eyJxdWVyaWVzIjpbeyJjaGFydHMiOlt7InR5cGUiOiJjb2x1bW4iLCJmdW5jIjoiQ09VTlQiLCJ5QXhpcyI6Imhvc3RfbGlzdGluZ3NfY291bnQiLCJzY2llbnRpZmljRGlzcGxheSI6dHJ1ZSwiY29sb3IiOiJyYW5nZS1jdXN0b20ifV0sInhBeGlzIjoiY2l0eSIsIm1heHBvaW50cyI6IiIsInRpbWVzY2FsZSI6IiIsInNvcnQiOiIiLCJzZXJpZXNCcmVha2Rvd24iOiJyb29tX3R5cGUiLCJjb25maWciOnsiZGF0YXNldCI6ImFpcmJuYi1saXN0aW5ncyIsIm9wdGlvbnMiOnsiZGlzanVuY3RpdmUuaG9zdF92ZXJpZmljYXRpb25zIjp0cnVlLCJkaXNqdW5jdGl2ZS5hbWVuaXRpZXMiOnRydWUsImRpc2p1bmN0aXZlLmZlYXR1cmVzIjp0cnVlfX19XSwidGltZXNjYWxlIjoiIiwiZGlzcGxheUxlZ2VuZCI6dHJ1ZSwiYWxpZ25Nb250aCI6dHJ1ZX0%3D&location=16,41.38377,2.15774&basemap=jawg.streets)

![](descargar.png)

```{r}
airbnb<-read.csv('airbnb-listings.csv',sep = ';')
options(repr.plot.height=4,repr.plot.width=6,repr.plot.res = 300)
```

1.  Vamos a quedarnos con las columnas de mayor interés: 'City','Room.Type','Neighbourhood','Accommodates','Bathrooms','Bedrooms','Beds','Price','Square.Feet','Guests.Included','Extra.People','Review.Scores.Rating','Latitude', 'Longitude' Nos quedarmos solo con las entradas de Madrid para Room.Type=="Entire home/apt" y cuyo barrio (Neighbourhood) no está vacio '' Podemos eliminar las siguientes columnas que ya no son necesarias: "Room.Type",'City' Llama a nuevo dataframe df_madrid.

```{r}
interest_columns <- c('City', 'Room.Type', 'Neighbourhood', 'Accommodates', 'Bathrooms', 'Bedrooms',
                         'Beds', 'Price', 'Square.Feet', 'Guests.Included', 'Extra.People',
                         'Review.Scores.Rating', 'Latitude', 'Longitude')

airbnb <- airbnb[, interest_columns]

# Nos quedarmos solo con las entradas de Madrid para Room.Type=="Entire home/apt" y cuyo barrio (Neighbourhood) no está vacio ''

airbnb <- airbnb[which(airbnb$Room.Type == "Entire home/apt" & airbnb$City == "Madrid" & airbnb$Neighbourhood != ''), ]

# Eliminar las siguientes columnas que ya no son necesarias: "Room.Type",'City' Llama a nuevo dataframe df_madrid

df_madrid <- airbnb[, !(names(airbnb) %in% c('Room.Type', 'City'))]

head(df_madrid)

```

-   Información de nuestro nuevo dataframe

```{r}
nrow(df_madrid) # número de filas
ncol(df_madrid) # número de columnas
str(df_madrid) # tipo columnas
summary(df_madrid) #Resumen de las columnas
```

------------------------------------------------------------------------

2.  Crea una nueva columna llamada Square.Meters a partir de Square.Feet. Recuerda que un pie cuadrado son 0.092903 metros cuadrados.

```{r}
df_madrid$Square.Meters <- df_madrid$Square.Feet * 0.092903

head(df_madrid)
```

------------------------------------------------------------------------

3.  ¿Que porcentaje de los apartamentos no muestran los metros cuadrados? Es decir, ¿cuantos tienen NA en Square.Meters?

```{r}
# Percentage of NAs in Square.Meters
percentage_na <- sum(is.na(df_madrid$Square.Meters)) / nrow(df_madrid) * 100

print(paste("Porcentaje de apartamentos que no muestran los mts2:", round(percentage_na, 2), "%"))
```

------------------------------------------------------------------------

4.  De todos los apartamentos que tienen un valor de metros cuadrados diferente de NA ¿Que porcentaje de los apartamentos tienen 0 metros cuadrados?

```{r}
non_na <- df_madrid$Square.Meters[!is.na(df_madrid$Square.Meters)]
zero_meters_count <- sum(non_na == 0)

percentage <- zero_meters_count / length(non_na) * 100

print(paste("El porcentaje de apartamentos con cero 0 metros cuadrados diferente de NA:", round(percentage, 2), "%"))
```

------------------------------------------------------------------------

5.  Reemplazar todos los 0m\^2 por NA

```{r}
df_madrid$Square.Meters[df_madrid$Square.Meters == 0] <- NA

head(df_madrid)
```

------------------------------------------------------------------------

Hay muchos NAs, vamos a intentar crear un modelo que nos prediga cuantos son los metros cuadrados en función del resto de variables para tratar de rellenar esos NA. Pero **antes de crear el modelo** vamos a hacer: \* pintar el histograma de los metros cuadrados y ver si tenemos que filtrar algún elemento más. \* crear una variable sintética nueva basada en la similitud entre barrios que usaremos en nuestro modelo.

6.  Pinta el histograma de los metros cuadrados y ver si tenemos que filtrar algún elemento más

```{r}
# Instalación
#install.packages(c('ggplot2'), repos='https://cran.rstudio.com/')

library("ggplot2")
```

```{r}
# Filtro el dataframe para no incluir los NA
ggplot(df_madrid[!is.na(df_madrid$Square.Meters), ], aes(x = Square.Meters)) +
  geom_histogram(binwidth = 5, fill = "red", alpha = 0.5) +
  theme_minimal() +
  labs(title = "Square Meters Histogram")
```

------------------------------------------------------------------------

7.  Asigna el valor NA a la columna Square.Meters de los apartamentos que tengan menos de 20 m\^2

```{r}
df_madrid$Square.Meters[df_madrid$Square.Meters < 20] <- NA

head(df_madrid)

```

------------------------------------------------------------------------

8.  Existen varios Barrios que todas sus entradas de Square.Meters son NA, vamos a eliminar del dataset todos los pisos que pertenecen a estos barrios.

```{r}
# -- Forma #2
# Barrios con todos los registros de Square.Meters como NA
neighbours_with_all_na <- with(df_madrid, tapply(Square.Meters, Neighbourhood, function(x) all(is.na(x))))

# Traer los barrios que cumplen con esta condición
neighbours_to_delete <- names(neighbours_with_all_na[neighbours_with_all_na])

# Eliminar los barrios correspondientes del DataFrame
df_madrid <- df_madrid[!df_madrid$Neighbourhood %in% neighbours_to_delete, ]

head(df_madrid)
dim(df_madrid)

```

```         
------------------------------------------------------------------------
```

9.  ¿Tienen todos los barrios los mismos metros cuadrados de media? ¿Con que test lo comprobarías?

**Respuesta: No**, todos los barrios no tienen los mismos metros cuadrados de media. Los resultados me dicen que existen diferencias en los metros cuadrados medios entre los barrios.

Para comprobarlo he usado un test Shapiro que me indico que los datos no siguen una distribución normal, a pesar de ello opte por usar el test ANOVA.

```{r}
# En este punto tome la decisión de usar el test de Shapiro evaluar la normalidad de los datos de m2 por barrio y posteriormente ANOVA

# FORMA (1)
library(stats)

# Crear un factor para el Neighbourhood
df_madrid$Neighbourhood <- as.factor(df_madrid$Neighbourhood)

# Aplicar la prueba de Shapiro-Wilk para cada barrio
for (barrio in levels(df_madrid$Neighbourhood)) {
  square_mts2_barrio <- df_madrid$Square.Meters[df_madrid$Neighbourhood == barrio]
  square_mts2_barrio <- square_mts2_barrio[!is.na(square_mts2_barrio)]  # Eliminar NAs
  
  # Realizo validación debido a error [sample size must be between 3 and 5000]
  if (length(square_mts2_barrio) > 0 && 
      length(square_mts2_barrio) >= 3 && 
      length(square_mts2_barrio) <= 5000) {
    resultado_shapiro <- shapiro.test(square_mts2_barrio)
    print(paste("Barrio:", barrio, "- p-value:", resultado_shapiro$p.value))
  } else if (length(square_mts2_barrio) == 0) {
    print(paste("Barrio:", barrio, "- No hay datos disponibles"))
  } else {
    print(paste("Barrio:", barrio, "- Tamaño de muestra fuera de rango"))
  }
}

```

```{r}
# Procedo a hacer el test de ANOVA

anova_results <- aov(Square.Meters ~ Neighbourhood, data = df_madrid)
print(summary(anova_results))
```

```{r}
# Investigando encontre que se puede aplicar tambien de esta manera realizando una regresión lineal y obtengo los mismos resultados para el P valor del test ANOVA

# FORMA (2)

residuos <- resid(lm(Square.Meters ~ Neighbourhood, data = df_madrid))
shapiro.test(residuos)

modelo <- lm(Square.Meters ~ Neighbourhood, data = df_madrid)
anova(modelo)
```

**De los datos anteriores interpreto que:**

1\. El test de Shapiro me indica por medio del P-valor no sigue una distribución normal.

2\. El test ANOVA muestra que hay diferencias estadisticas entre los barrios en cuanto a los metros cuadrados.

3\. Podria aplicar Logaritmos como un ejemplo que realizo el profesor, para ayudar a mejorar la normalidad de los datos?. No estoy al 100% seguro.

------------------------------------------------------------------------

10. Vamos a agrupar los barrios por metros cuadrados. Podemos usar una matriz de similaridad de Tukey. Muestra como de similares o diferentes son los barrios si nos fijámos únicamente en los metros cuadrados de los pisos. ¿Como se diferencia la media del Barrio A al Barrio B? (Es decir, cual sería el pvalor suponiendo una H0 en la que las medias son iguales)

```{r}
# Aplicar Tukey al modelo ANOVA
tky<-TukeyHSD(anova_results)
tky
```

```{r}
# Extraer resultados para Neighbourhood y convertirlos a un dataframe
tky.result <- data.frame(tky$Neighbourhood)
cn <- sort(unique(df_madrid$Neighbourhood))
resm <- matrix(NA, length(cn), length(cn))
rownames(resm) <- cn
colnames(resm) <- cn

# Asignar p-valores ajustados a la matriz
resm[lower.tri(resm)] <- round(tky.result$p.adj, 4)
resm[upper.tri(resm)] <- t(resm)[upper.tri(resm)]
diag(resm) <- 1 

library(ggplot2)
library(reshape2)

dfResm <- melt(resm)

# Crear gráfica de la matriz de similitud
ggplot(dfResm, aes(x=Var1, y=Var2, fill=value))+
  geom_tile(colour = "black")+
  geom_text(aes(label=paste(round(value*100,0),"%")),size = 3) +
  scale_fill_gradient(low = "white",high = "steelblue")+
  ylab("Class")+xlab("Class")+theme_bw()+
  theme(axis.text.x = element_text(angle = 90, hjust = 1),legend.position="none")
```

------------------------------------------------------------------------

11. En el punto anterior has creado una matriz de p-valores que indica como de parecidos son dos barrios. Si su pvalor es alto significa que los barrios son diferentes, si es bajo significa que los barrios se parecen. Esta matriz la podemos usar como matriz de distancia si restamos el pvalor a 1. Es decir si usamos como distancia 1-pvalor. De esta forma barrios con un pvalor alto tendrán una distancia mayor que aquellos con un pvalor bajo. Usando esta última métrica como matriz de distancias dibuja un dendrograma de los diferentes barrios.

```{r}
# Convertir p-valores a distancias
distance_matrix <- 1 - resm

# Realizar clustering jerárquico
hc <- hclust(as.dist(distance_matrix), method = "complete")
plot(hc, main = "Dendrograma de Barrios", xlab = "Barrios", sub = "", ylab = "Distancia")

```

------------------------------------------------------------------------

10. ¿Que punto de corte sería el aconsejable?, ¿cuantos clusters aparecen?

```{r}

```

------------------------------------------------------------------------

11. Vamos a crear una nueva columna en el dataframe df_madrid con un nuevo identificador marcado por los clusters obtenidos. Esta columna la llamaremos neighb_id

```{r}

```

------------------------------------------------------------------------

12. Vamos a crear dos grupos, uno test y otro train.

```{r}

```

------------------------------------------------------------------------

13. Tratamos de predecir los metros cuadrados en función del resto de columnas del dataframe.

```{r}

```

------------------------------------------------------------------------

14. Evaluar la calidad de vuestro modelo

```{r}

```

------------------------------------------------------------------------

15. Si tuvieramos un anuncio de un apartamento para 6 personas (Accommodates), con 1 baño, con un precio de 80€/noche y 3 habitaciones en el barrio de Sol, con 3 camas y un review de 80. ¿Cuantos metros cuadrados tendría? Si tu modelo necesita algúna variable adicional puedes inventartela dentro del rango de valores del dataset. ¿Como varía sus metros cuadrados con cada habitación adicional?

```{r}

```

------------------------------------------------------------------------

16. Rellenar los Square.Meters con valor NA con el estimado con el modelo anterior.

```{r}

```

------------------------------------------------------------------------

17. Usar PCA para encontrar el apartamento más cercano a uno dado. Este algoritmo nos ayudaría a dado un apartamento que el algoritmo nos devolvería los 5 apartamentos más similares.

Crearemos una función tal que le pasemos un apartamento con los siguientes datos: \* Accommodates \* Bathrooms \* Bedrooms \* Beds \* Price \* Guests.Included \* Extra.People \* Review.Scores.Rating \* Latitude \* Longitude \* Square.Meters

y nos devuelva los 5 más similares de:

```{r}

```

------------------------------------------------------------------------
